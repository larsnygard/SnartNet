import { pipe } from '@libp2p/utils';
import { encode, decode } from 'it-length-prefixed';
export class OutboundStream {
    rawStream;
    constructor(rawStream, errCallback, opts) {
        this.rawStream = rawStream;
        if (opts.maxBufferSize != null) {
            rawStream.maxWriteBufferLength = opts.maxBufferSize;
        }
        rawStream.addEventListener('close', (evt) => {
            if (evt.error != null) {
                errCallback(evt.error);
            }
        });
    }
    get protocol() {
        return this.rawStream.protocol;
    }
    async push(data) {
        return this.pushPrefixed(encode.single(data));
    }
    /**
     * Same to push() but this is prefixed data so no need to encode length prefixed again
     */
    pushPrefixed(data) {
        // TODO: backpressure
        this.rawStream.send(data);
    }
    async close(options) {
        await this.rawStream.close(options)
            .catch(err => {
            this.rawStream.abort(err);
        });
    }
}
export class InboundStream {
    source;
    rawStream;
    closeController;
    constructor(rawStream, opts = {}) {
        this.rawStream = rawStream;
        this.closeController = new AbortController();
        this.closeController.signal.addEventListener('abort', () => {
            rawStream.close()
                .catch(err => {
                rawStream.abort(err);
            });
        });
        this.source = pipe(this.rawStream, (source) => decode(source, opts));
    }
    async close() {
        this.closeController.abort();
    }
}
//# sourceMappingURL=stream.js.map