import { AbstractMessageStream } from '@libp2p/utils';
import { raceSignal } from 'race-signal';
export class WebTransportMessageStream extends AbstractMessageStream {
    writer;
    reader;
    constructor(init) {
        super(init);
        this.writer = init.stream.writable.getWriter();
        this.reader = init.stream.readable.getReader();
        Promise.resolve().then(async () => {
            while (true) {
                const { done, value } = await this.reader.read();
                if (value != null) {
                    this.onData(value);
                }
                if (done) {
                    break;
                }
            }
        })
            .catch(err => {
            this.abort(err);
        });
    }
    async close(options) {
        await raceSignal(this.writer.close(), options?.signal);
    }
    sendData(data) {
        this.writer.write(data.subarray())
            .catch(err => {
            this.abort(err);
        });
        return {
            sentBytes: data.byteLength,
            canSendMore: true
        };
    }
    sendReset(err) {
        this.writer.abort(err)
            .catch(err => {
            this.log.error('could not send reset - %e', err);
        });
    }
    sendPause() {
    }
    sendResume() {
    }
}
//# sourceMappingURL=webtransport-message-stream.js.map