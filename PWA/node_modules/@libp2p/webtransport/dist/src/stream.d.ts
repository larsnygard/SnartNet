import { AbstractStream } from '@libp2p/utils';
import type { AbortOptions, MessageStreamDirection, Logger, StreamOptions } from '@libp2p/interface';
import type { AbstractStreamInit, SendResult } from '@libp2p/utils';
import type { Uint8ArrayList } from 'uint8arraylist';
interface WebTransportStreamInit extends AbstractStreamInit {
    stream: WebTransportBidirectionalStream;
}
export declare class WebTransportStream extends AbstractStream {
    private readonly writer;
    private readonly reader;
    constructor(init: WebTransportStreamInit);
    private readData;
    sendData(data: Uint8ArrayList): SendResult;
    sendReset(err: Error): void;
    sendCloseWrite(options?: AbortOptions): Promise<void>;
    sendCloseRead(options?: AbortOptions): Promise<void>;
    sendPause(): void;
    sendResume(): void;
}
export declare function webtransportBiDiStreamToStream(stream: WebTransportBidirectionalStream, streamId: string, direction: MessageStreamDirection, log: Logger, options?: StreamOptions): WebTransportStream;
export {};
//# sourceMappingURL=stream.d.ts.map